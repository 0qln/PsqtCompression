using PsqtCompression.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PsqtCompression.Helpers
{
    internal class Stockfish
    {
        internal static class SFHelper
        {
            static void PrintPsqa()
            {
                for (int piece = 0; piece < PiecePsqa.Length / 16; piece++)
                {
                    Console.WriteLine();
                    Console.WriteLine();
                    for (int value = 0; value < 16; value++)
                    {
                        Console.Write("0b");

                        Console.Write(ExtractShort(PiecePsqa[piece * 16 + value], 0).ToBin());
                        Console.Write("_");
                        Console.Write(ExtractShort(PiecePsqa[piece * 16 + value], 1).ToBin());
                        Console.Write("__");
                        Console.Write(ExtractShort(PiecePsqa[piece * 16 + value], 2).ToBin());
                        Console.Write("_");
                        Console.Write(ExtractShort(PiecePsqa[piece * 16 + value], 3).ToBin());

                        Console.Write(", ");
                        Console.WriteLine();
                    }
                }
            }


            static short ExtractShort(ulong u64, int index) => (short)(u64 >> 48 - index * 16 & 0xFFFFul);


            static ulong[] PawnPsqa =
            {
        // Pawn
        // length: 24
            0b0000000001111110_0000000011000110__0000000010000000_0000000011001000, 0b0000000010000111_0000000011010111__0000000010001110_0000000011010011, 0b0000000010001100_0000000011011110__0000000010010001_0000000011010100, 0b0000000010000101_0000000011001000__0000000001111001_0000000010111100,
            0b0000000001110011_0000000011000101__0000000001101101_0000000011000111, 0b0000000010000111_0000000011000100__0000000010001011_0000000011010011, 0b0000000010011011_0000000011010000__0000000010010011_0000000011010001, 0b0000000010000010_0000000011000110__0000000001101000_0000000011001001,
            0b0000000001111001_0000000011010101__0000000001101000_0000000011001111, 0b0000000010000100_0000000011000110__0000000010001111_0000000011001100, 0b0000000010100011_0000000011000000__0000000010001101_0000000011000001, 0b0000000001111110_0000000011000011__0000000001110111_0000000011001000,
            0b0000000010000111_0000000011011010__0000000001111000_0000000011010100, 0b0000000001110001_0000000011010000__0000000001111110_0000000011001000, 0b0000000010000111_0000000011001001__0000000001111100_0000000011001010, 0b0000000001110000_0000000011011100__0000000010000001_0000000011010111,
            0b0000000001111111_0000000011101001__0000000001110001_0000000011100000, 0b0000000001110110_0000000011100001__0000000010010010_0000000011101011, 0b0000000001110100_0000000011101100__0000000001110111_0000000011010111, 0b0000000001101110_0000000011010110__0000000001110001_0000000011011100,
            0b0000000001110101_0000000011001101__0000000010000010_0000000011000000, 0b0000000001111010_0000000011011011__0000000001110001_0000000011100100, 0b0000000010000000_0000000011100110__0000000001101110_0000000011011111, 0b0000000010000110_0000000011010101__0000000001110011_0000000011010101,
    };

            static ulong[] PiecePsqa =
            {        

        // Knight
        // length: 16
            0b0000001001011110_0000001011110110__0000001010110001_0000001100010101, 0b0000001011000011_0000001100100101__0000001011000100_0000001101000001, 0b0000001011000000_0000001100010011__0000001011100100_0000001100100000, 0b0000001011110010_0000001101000100__0000001011111110_0000001101011110,
            0b0000001011010000_0000001100101110__0000001011111100_0000001100111011, 0b0000001100010011_0000001101001110__0000001100011001_0000001101110011, 0b0000001011101010_0000001100110011__0000001100010101_0000001101010100, 0b0000001100110101_0000001101100011__0000001100111110_0000001101110010,
            0b0000001011101011_0000001100101001__0000001100011010_0000001101000110, 0b0000001100111001_0000001101011111__0000001101000000_0000001101111101, 0b0000001100000100_0000001100100011__0000001100100011_0000001100101010, 0b0000001101000111_0000001101000110__0000001101000010_0000001101100111,
            0b0000001011001010_0000001100010001__0000001011110010_0000001100100100, 0b0000001100010001_0000001100100011__0000001100110010_0000001101100010, 0b0000001001000100_0000001011110010__0000001010111010_0000001011111110, 0b0000001011010101_0000001100011110__0000001011110011_0000001101000101,

        // Bishop
        // length: 16
            0b0000001100010100_0000001101101011__0000001100110101_0000001101111110, 0b0000001100110011_0000001101111001__0000001100101001_0000001110001011, 0b0000001100101110_0000001101111001__0000001100111111_0000001110001010, 0b0000001101000110_0000001110000111__0000001100111100_0000001110010100,
            0b0000001100110100_0000001110001000__0000001101001000_0000001110010010, 0b0000001100110101_0000001110010010__0000001101000101_0000001110011010, 0b0000001100110101_0000001110000101__0000001101000001_0000001110001111, 0b0000001101001011_0000001110010011__0000001101010100_0000001110011111,
            0b0000001100110001_0000001110000111__0000001101001101_0000001110010010, 0b0000001101001000_0000001110001001__0000001101001111_0000001110011110, 0b0000001100101110_0000001101111110__0000001100111101_0000001110010111, 0b0000001100111010_0000001110010110__0000001101000001_0000001110010111,
            0b0000001100101101_0000001101111101__0000001100101111_0000001110000101, 0b0000001100111101_0000001110010010__0000001100111001_0000001110010100, 0b0000001100010111_0000001101110011__0000001100111010_0000001101110110, 0b0000001100101111_0000001101111001__0000001100101001_0000001110000010,

        // Rook
        // length: 16
            0b0000010011011101_0000010101011011__0000010011101000_0000010101010111, 0b0000010011101110_0000010101011010__0000010011110111_0000010101011011, 0b0000010011100111_0000010101011000__0000010011101111_0000010101011011, 0b0000010011110100_0000010101100011__0000010100000010_0000010101100010,
            0b0000010011100011_0000010101101010__0000010011110001_0000010101011100, 0b0000010011111011_0000010101100010__0000010011111111_0000010101011110, 0b0000010011101111_0000010101011110__0000010011110111_0000010101100101, 0b0000010011111000_0000010101011011__0000010011110110_0000010101101011,
            0b0000010011100001_0000010101011111__0000010011101101_0000010101101100, 0b0000010011111000_0000010101101011__0000010011111111_0000010101011110, 0b0000010011100110_0000010101101010__0000010011111010_0000010101100101, 0b0000010100000010_0000010101011101__0000010100001000_0000010101101110,
            0b0000010011111010_0000010101101000__0000010100001000_0000010101101001, 0b0000010100001100_0000010101111000__0000010100001110_0000010101011111, 0b0000010011101011_0000010101110110__0000010011101001_0000010101100100, 0b0000010011111011_0000010101110111__0000010100000101_0000010101110001,

        // Queen
        // length: 16
            0b0000100111101101_0000101000110101__0000100111100101_0000101001000001, 0b0000100111100101_0000101001001011__0000100111101110_0000101001100000, 0b0000100111100111_0000101001000100__0000100111101111_0000101001011011, 0b0000100111110010_0000101001100100__0000100111110110_0000101001110110,
            0b0000100111100111_0000101001010011__0000100111110000_0000101001101000, 0b0000100111110111_0000101001110001__0000100111110001_0000101001111101, 0b0000100111101110_0000101001100011__0000100111101111_0000101001110111, 0b0000100111110011_0000101010000111__0000100111110010_0000101010010010,
            0b0000100111101010_0000101001011101__0000100111111000_0000101001110100, 0b0000100111110110_0000101010000011__0000100111101111_0000101010001111, 0b0000100111100110_0000101001010100__0000100111110100_0000101001101000, 0b0000100111110000_0000101001101111__0000100111110010_0000101001111011,
            0b0000100111100101_0000101001001000__0000100111110000_0000101001011111, 0b0000100111110100_0000101001100010__0000100111110010_0000101001110010, 0b0000100111101000_0000101000110000__0000100111101000_0000101001000110, 0b0000100111101011_0000101001001111__0000100111101000_0000101001011000,

        // King
        // length: 16
            0b0000110011000111_0000101110111001__0000110011111111_0000101111100101, 0b0000110011000111_0000110000001101__0000110001111110_0000110000000100, 0b0000110011001110_0000101111101101__0000110011100111_0000110000011100, 0b0000110010100010_0000110000111101__0000110001101011_0000110000111111,
            0b0000110001111011_0000110000010000__0000110010111010_0000110000111010, 0b0000110001100001_0000110001100001__0000110000110000_0000110001100111, 0b0000110001011100_0000110000011111__0000110001110110_0000110001010100, 0b0000110001000010_0000110001100100__0000110000011010_0000110001100100,
            0b0000110001010010_0000110000011000__0000110001101011_0000110001011110, 0b0000110000100001_0000110001111111__0000101111111110_0000110001111111, 0b0000110000110011_0000110000010100__0000110001001001_0000110001100100, 0b0000110000001001_0000110001110000__0000101111010111_0000110001110111,
            0b0000110000010000_0000101111100111__0000110000110000_0000110000110001, 0b0000101111111001_0000110000101100__0000101111011001_0000110000111011, 0b0000101111110011_0000101111000011__0000110000010001_0000101111110011, 0b0000101111100101_0000110000000001__0000101110110111_0000110000000110,
    };

            static void GenerateExtractedRawPsqa()
            {
                Console.WriteLine("\r\n    static short[][] ExtractedRawPsqa =\r\n    {");

                for (int i = 0; i < SFData.RawPiecePsqa.Length; i++)
                {
                    Console.WriteLine("\r\n        new short[]\r\n        {");

                    for (int j = 0; j < SFData.RawPiecePsqa[i].Length; j++)
                    {
                        Console.Write(SFData.RawPiecePsqa[i][j].Item1);
                        Console.Write(",");
                        Console.Write(SFData.RawPiecePsqa[i][j].Item2);
                        Console.Write(",");
                    }

                    Console.WriteLine("\r\n        },");
                }

                Console.WriteLine("\r\n    };");
            }


            static void GenerateExtractedRawPsqa_MG()
            {
                Console.WriteLine("\r\n    static short[][] ExtractedRawPsqa_MG =\r\n    {");

                for (int i = 0; i < SFData.RawPiecePsqa.Length; i++)
                {
                    Console.WriteLine("\r\n        new short[]\r\n        {");

                    for (int j = 0; j < SFData.RawPiecePsqa[i].Length; j++)
                    {
                        Console.Write(SFData.RawPiecePsqa[i][j].Item1);
                        Console.Write(",");
                    }

                    Console.WriteLine("\r\n        },");
                }

                Console.WriteLine("\r\n    };");
            }


            static void GenerateExtractedRawPsqa_EG()
            {
                Console.WriteLine("\r\n    static short[][] ExtractedRawPsqa_EG =\r\n    {");

                for (int i = 0; i < SFData.RawPiecePsqa.Length; i++)
                {
                    Console.WriteLine("\r\n        new short[]\r\n        {");

                    for (int j = 0; j < SFData.RawPiecePsqa[i].Length; j++)
                    {
                        Console.Write(SFData.RawPiecePsqa[i][j].Item2);
                        Console.Write(",");
                    }

                    Console.WriteLine("\r\n        },");
                }

                Console.WriteLine("\r\n    };");
            }



            static void GeneratePsqa()
            {
                Console.WriteLine("\r\n    static short[] Psqa =\r\n    {");

                for (int i = 0; i < SFData.ExtractedRawPsqa.Length; i++)
                {
                    for (int j = 0; j < SFData.ExtractedRawPsqa[i].Length; j++)
                    {
                        Console.Write(SFData.ExtractedRawPsqa[i][j]);
                        Console.Write(",");
                    }
                }

                Console.WriteLine("\r\n    };");
            }

            static void GeneratePsqa_MG()
            {
                Console.WriteLine("\r\n    static short[] Psqa_MG =\r\n    {");

                for (int i = 0; i < SFData.ExtractedRawPsqa_MG.Length; i++)
                {
                    for (int j = 0; j < SFData.ExtractedRawPsqa_MG[i].Length; j++)
                    {
                        Console.Write(SFData.ExtractedRawPsqa_MG[i][j]);
                        Console.Write(",");
                    }
                }

                Console.WriteLine("\r\n    };");
            }
            static void GeneratePsqa_EG()
            {
                Console.WriteLine("\r\n    static short[] Psqa_EG =\r\n    {");

                for (int i = 0; i < SFData.ExtractedRawPsqa_EG.Length; i++)
                {
                    for (int j = 0; j < SFData.ExtractedRawPsqa_EG[i].Length; j++)
                    {
                        Console.Write(SFData.ExtractedRawPsqa_EG[i][j]);
                        Console.Write(",");
                    }
                }

                Console.WriteLine("\r\n    };");
            }

            static void GenerateAbsolutePsqa_MG()
            {
                Console.WriteLine("\r\n    static short[] PsqaAbsulute_MG =\r\n    {");

                for (int i = 0; i < SFData.Psqa_MG.Length; i++)
                {
                    Console.Write(SFData.Psqa_MG[i] + Math.Abs(SFData.Psqa_MG.Min()));
                    Console.Write(",");
                }

                Console.WriteLine("\r\n    };");
            }
            static void GenerateAbsolutePsqa_EG()
            {
                Console.WriteLine("\r\n    static short[] PsqaAbsulute_EG =\r\n    {");

                for (int i = 0; i < SFData.Psqa_EG.Length; i++)
                {
                    Console.Write(SFData.Psqa_EG[i] + Math.Abs(SFData.Psqa_EG.Min()));
                    Console.Write(",");
                }

                Console.WriteLine("\r\n    };");
            }
        }
    }
}
