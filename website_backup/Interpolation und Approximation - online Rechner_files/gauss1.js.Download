function gauss(A,b,B){var C,D,E,F,G,H,I,J,K;if(B==undefined)B=1e-8;const L=A.length;for(C=0;C<L;++C){F=C;H=A[C];J=Math.abs(H[C]);for(D=C;++D<L;){if((G=Math.abs(A[D][C]))>J){F=D;J=G}}if(J<B)return-1;if(C!=F){G=b[C];b[C]=b[F];b[F]=G;H=A[C];A[C]=A[F];A[F]=H}H=A[C];K=1.0/H[C];for(D=C;++D<L;){I=A[D];G=I[C];if(G!==0.0){G*=K;for(E=C;++E<L;)I[E]-=H[E]*G;b[D]-=b[C]*G}}}for(C=L;--C>=0;){G=b[C];H=A[C];for(E=C;++E<L;)G-=H[E]*b[E];b[C]=G/H[C]}return 0}function gaussFPS(A,b,B){var C,D,E,F,G,H,I,J,K,L,M,N,O=null,P=0;const Q=A.length,R=A[0].length,S=Math.min(Q,R),T=new Array(R);if(B==undefined)B=1e-8;N=B*100;for(C=0;C<R;++C)T[C]=C;M=0.0;for(C=0;C<S;++C)if(Math.abs(A[C][C])>M)M=Math.abs(A[C][C]);B=B*M;for(C=0;C<Q;++C){F=C;G=C;J=Math.abs(A[C][C]);for(D=C;D<Q;++D){L=A[D];for(E=C;E<R;++E){if((H=Math.abs(L[E]))>J){J=H;F=D;G=E}}}if(J<=B){P=R-C;break}if(C!=G){for(D=Q;--D>=0;){L=A[D];H=L[G];L[G]=L[C];L[C]=H}const U=T[C];T[C]=T[G];T[G]=U}if(C!=F){H=b[C];b[C]=b[F];b[F]=H;K=A[C];A[C]=A[F];A[F]=K}K=A[C];I=1.0/K[C];for(D=C;++D<Q;){L=A[D];if(L[C]!==0.0){H=L[C]*I;for(E=C+1;E<R;++E)L[E]-=K[E]*H;b[D]-=b[C]*H}}}if(P===0&&R>Q)P=R-C;var V=Q-1;if(P!==0){var W=0,X=0.0;for(E=0;E<R;++E)if(Math.abs(b[E])>X){X=Math.abs(b[E]);++W}if(W>1)N*=X;V=C-1;for(;C<Q;++C)if(Math.abs(b[C])>N){return-P;}O=new Array(P);for(E=0;E<P;++E){O[E]=Vector.newZeroArray(R);const Y=O[E];Y[R-E-1]=1.0;for(C=R-P;--C>=0;){H=0;for(D=C;++D<R;)H+=A[C][D]*Y[D];Y[C]=-H/A[C][C]}}}for(C=V;C>=0;--C){H=b[C];K=A[C];for(var Z=C;++Z<R;)H-=K[Z]*b[Z];b[C]=H/K[C]}for(C=0;C<R;){if(T[C]==C)++C;else{E=T[C];H=b[C];b[C]=b[E];b[E]=H;T[C]=T[E];T[E]=E;if(O!==null)for(D=0;D<P;++D){const a=O[D][C];O[D][C]=O[D][E];O[D][E]=a}}}if(O!==null){orthoNormalize(O,P);for(C=0;C<P;++C){const c=Vector.dot(O[C],b);Vector.linco(b,O[C],-c)}if(P>Q)A.length=P;for(C=0;C<P;++C){if(C>=Q)A[C]=new Array(R);for(E=0;E<R;++E)A[C][E]=O[C][E]}}return P}function orthoNormalize(v,n){var A,B,C;for(A=0;A<n;++A){C=Vector.norm(v[A]);if(C!==0)break}if(A>=n)return;if(A!==0){C=v[A];v[A]=v[0];v[0]=C}Vector.doNorm(v[0]);for(A=1;A<n;++A){for(B=0;B<A;++B){C=Vector.dot(v[A],v[B]);Vector.linco(v[A],v[B],-C)}if(Vector.norm(v[A])>1e-7)Vector.doNorm(v[A])}}
